name: Break Tracker CI
on:
  push:
  pull_request:

jobs:
  api:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install backend deps
        working-directory: backend
        run: npm i --no-audit --no-fund

      - name: Start backend
        working-directory: backend
        env:
          PORT: 3001
          JWT_SECRET: testsecret
        run: |
          node server.js & echo $! > server.pid
          for i in {1..30}; do
            curl -fsS http://localhost:3001/api/health && break
            sleep 1
          done

      - name: Health check
        run: |
          curl -fsS http://localhost:3001/api/health | tee health.json
          grep -q '"status":"ok"' health.json

      - name: Login (admin/admin123)
        run: |
          curl -fsS -H "Content-Type: application/json" \
            -d '{"username":"admin","password":"admin123"}' \
            http://localhost:3001/api/auth/login | tee login.json
          grep -q '"token"' login.json
          echo "TOKEN=$(node -p "JSON.parse(require('fs').readFileSync('login.json','utf8')).token")" >> $GITHUB_ENV

      - name: Create department
        env:
          TOKEN: ${{ env.TOKEN }}
        run: |
          DNAME="CI Dept $GITHUB_RUN_NUMBER"
          curl -fsS -H "Authorization: Bearer $TOKEN" -H "Content-Type: application/json" \
            -d "{\"name\":\"$DNAME\"}" \
            http://localhost:3001/api/departments | tee dep.json
          grep -q '"id":' dep.json

      - name: Create team (auto-pick department)
        env:
          TOKEN: ${{ env.TOKEN }}
        run: |
          TNAME="CI Team $GITHUB_RUN_NUMBER"
          curl -fsS -H "Authorization: Bearer $TOKEN" -H "Content-Type: application/json" \
            -d "{\"name\":\"$TNAME\"}" \
            http://localhost:3001/api/teams | tee team.json
          grep -q '"id":' team.json

      - name: Create break type
        env:
          TOKEN: ${{ env.TOKEN }}
        run: |
          BNAME="CI Break $GITHUB_RUN_NUMBER"
          curl -fsS -H "Authorization: Bearer $TOKEN" -H "Content-Type: application/json" \
            -d "{\"name\":\"$BNAME\",\"color\":\"#ccc\"}" \
            http://localhost:3001/api/break-types | tee bt.json
          grep -q '"id":' bt.json
          echo "BT_ID=$(node -p "JSON.parse(require('fs').readFileSync('bt.json','utf8')).id")" >> $GITHUB_ENV

      - name: Start break
        env:
          TOKEN: ${{ env.TOKEN }}
          BT_ID: ${{ env.BT_ID }}
        run: |
          curl -fsS -H "Authorization: Bearer $TOKEN" -H "Content-Type: application/json" \
            -d "{\"break_type_id\":$BT_ID}" \
            http://localhost:3001/api/breaks/start | tee start.json
          grep -q '"id":' start.json

      - name: Stop break
        env:
          TOKEN: ${{ env.TOKEN }}
        run: |
          curl -fsS -H "Authorization: Bearer $TOKEN" -H "Content-Type: application/json" \
            -d "{}" \
            http://localhost:3001/api/breaks/stop | tee stop.json
          grep -q '"success":true' stop.json

      - name: Stop backend
        if: always()
        working-directory: backend
        run: kill -9 $(cat server.pid) || true
